name: CI + Release

on:
  push:
    branches: ['**']               # CI on every branch
    tags: ['release/*-v*']         # dev/alpha/beta/mark
  pull_request: {}
  # Manual entry point for the repo owner to prepare/approve releases and (optionally) create the tag.
  workflow_dispatch:
    inputs:
      create_tag:
        description: 'Create release tag from the current branch name (owner only)'
        type: boolean
        default: false
      ref:
        description: 'Branch to prepare a release from (defaults to the currently selected branch)'
        type: string
        required: false
        default: ''

permissions:
  contents: read

jobs:
  ci:
    name: Lint/Security/Test/Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      GOTOOLCHAIN: auto
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (patched 1.23 line)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.10'
          check-latest: true
          cache: true

      - name: Show Go env
        run: |
          go version
          go env

      - name: Deps (tidy, download, verify)
        run: make deps

      - name: Lint (6m timeout + PR annotations)
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.0
          golangci-lint --version
          golangci-lint run ./... --timeout=6m --out-format=github-actions

      - name: Security
        run: make security

      - name: Unit tests
        run: make test

      - name: Build (sanity)
        run: make build

      - name: Coverage summary
        if: always()
        run: |
          if [ -f dist/coverage.out ]; then
            go tool cover -func=dist/coverage.out | tail -n 1
          else
            echo "No coverage file found."
          fi

      - name: Upload coverage HTML (if generated)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: dist/coverage.html
          if-no-files-found: ignore

  # Manual owner-only entry point to approve/prepare a release and (optionally) create the tag
  prepare_or_approve_release:
    if: github.event_name == 'workflow_dispatch' && github.actor == github.repository_owner
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed to create tags
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref || github.ref_name }}

      - name: Determine branch to release from
        id: branch
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ inputs.ref || github.ref_name }}"
          # Normalize: strips refs/heads/ if present (workflow_dispatch 'ref' may be either form)
          BR="${BR#refs/heads/}"
          echo "branch=${BR}" >> "$GITHUB_OUTPUT"
          echo "Working on branch: ${BR}"

      - name: Validate branch naming & derive channel/version
        id: derive
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ steps.branch.outputs.branch }}"
          # Allowed branch prefixes by channel
          # Dev (local only – can prepare, but tag creation will be blocked)
          if [[ "${BR}" =~ ^(feature|bug|enhancement)/dev-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            CHANNEL="dev"
            VERSION="${BR##*/}"           # dev-vX-Y-Z
            VERSION="${VERSION#dev-}"     # vX-Y-Z
          # Alpha/Beta/Mark (eligible for releases)
          elif [[ "${BR}" =~ ^(feature|bug|enhancement)/alpha-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            CHANNEL="alpha"
            VERSION="${BR##*/}"
            VERSION="${VERSION#alpha-}"
          elif [[ "${BR}" =~ ^(feature|bug|enhancement)/beta-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            CHANNEL="beta"
            VERSION="${BR##*/}"
            VERSION="${VERSION#beta-}"
          elif [[ "${BR}" =~ ^(feature|bug|enhancement)/mark-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            CHANNEL="mark"
            VERSION="${BR##*/}"
            VERSION="${VERSION#mark-}"
          else
            echo "❌ Branch '${BR}' does not match any allowed pattern:"
            echo "   feature|bug|enhancement/{dev|alpha|beta|mark}-vMAJOR-MINOR-BUGFIX"
            exit 1
          fi

          echo "CHANNEL=${CHANNEL}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "PROPOSED_TAG=release/${CHANNEL}-${VERSION}" >> "$GITHUB_ENV"

          echo "✅ Derived:"
          echo "   CHANNEL=${CHANNEL}"
          echo "   VERSION=${VERSION}"
          echo "   PROPOSED_TAG=release/${CHANNEL}-${VERSION}"

          if [[ "${CHANNEL}" == "dev" ]]; then
            echo "ℹ️ Dev channel is local-only. You may NOT create a release tag."
          fi

      - name: (Optional) Create release tag from branch
        if: inputs.create_tag == true
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [[ "${CHANNEL}" == "dev" ]]; then
            echo "❌ Dev tags are local-only; refusing to create tag."
            exit 1
          fi

          TAG="release/${CHANNEL}-${VERSION}"     # e.g., release/alpha-v1-2-3
          echo "Creating tag '${TAG}' from HEAD of '${{ steps.branch.outputs.branch }}'..."

          # Create annotated tag locally and push, or use API via gh:
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          # Ensure we tag the current HEAD (already checked out to the requested ref)
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"

          echo "✅ Created and pushed tag: ${TAG}"
          echo "NOTE: This will trigger a new workflow run that performs the release."

  approve_release:
    # Release jobs run only on alpha/beta/mark tags (dev never reaches here).
    if: >
      github.ref_type == 'tag' &&
      (startsWith(github.ref_name, 'release/alpha-v') ||
       startsWith(github.ref_name, 'release/beta-v')  ||
       startsWith(github.ref_name, 'release/mark-v')) &&
      github.triggering_actor == github.repository_owner
    needs: [ci]
    runs-on: ubuntu-latest
    environment: release   # manual environment approval step
    permissions:
      contents: read
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format, find source branch, and enforce match
        shell: bash
        run: |
          set -euo pipefail

          RAW_TAG="${GITHUB_REF_NAME}"   # e.g. release/alpha-v1-2-3
          echo "RAW_TAG=${RAW_TAG}" >> "$GITHUB_ENV"

          # Validate tag format
          if [[ ! "${RAW_TAG}" =~ ^release/(alpha|beta|mark)-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            echo "❌ Invalid release tag: ${RAW_TAG}"
            exit 1
          fi

          CHANNEL="${RAW_TAG#release/}"; CHANNEL="${CHANNEL%%-*}"     # alpha|beta|mark
          VERSION="${RAW_TAG#release/${CHANNEL}-}"                    # v1-2-3
          echo "CHANNEL=${CHANNEL}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

          git fetch --all --tags --prune
          COMMIT_SHA="$(git rev-list -n1 "${RAW_TAG}")"
          if [[ -z "${COMMIT_SHA}" ]]; then
            echo "❌ Could not resolve commit for tag ${RAW_TAG}"
            exit 1
          fi

          SRC_BRANCH="$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/* --contains "${COMMIT_SHA}" | head -n1)"
          if [[ -z "${SRC_BRANCH}" ]]; then
            echo "❌ No remote branch contains commit ${COMMIT_SHA}. Ensure the tag points to a branch tip."
            exit 1
          fi
          SRC_BRANCH="${SRC_BRANCH#origin/}"
          echo "SOURCE_BRANCH=${SRC_BRANCH}" >> "$GITHUB_ENV"

          # Enforce allowed branch patterns for this channel
          if [[ ! "${SRC_BRANCH}" =~ ^(feature|bug|enhancement)/${CHANNEL}-v[0-9]+-[0-9]+-[0-9]+$ ]]; then
            echo "❌ Branch '${SRC_BRANCH}' does not match required pattern for '${CHANNEL}'."
            exit 1
          fi

          # Enforce tag version == branch version
          BR_VER="${SRC_BRANCH##*/}"     # <channel>-vX-Y-Z
          BR_VER="${BR_VER#${CHANNEL}-}" # vX-Y-Z
          if [[ "${BR_VER}" != "${VERSION}" ]]; then
            echo "❌ Version mismatch: tag=${VERSION}, branch=${BR_VER}"
            exit 1
          fi

          echo "✅ Tag and branch versions match."

  build_binaries:
    if: github.ref_type == 'tag' && github.triggering_actor == github.repository_owner
    needs: [approve_release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (patched 1.23 line)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.10'
          check-latest: true
          cache: true

      - name: Export tag env (safety)
        shell: bash
        run: |
          echo "RAW_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          CH="${RAW_TAG#release/}"; CH="${CH%%-*}"
          echo "CHANNEL=${CH}" >> "$GITHUB_ENV"
          echo "VERSION=${RAW_TAG#release/${CH}-}" >> "$GITHUB_ENV"

      - name: Build multi-arch binaries (Makefile)
        run: make build-multi

      - name: Create GitHub Release (idempotent)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RAW_TAG }}
          name: Cosmolet ${{ env.VERSION }}
          generate_release_notes: true

      - name: Upload binaries to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RAW_TAG }}
          files: |
            dist/cosmolet-*

  docker_multiarch:
    if: >
      github.ref_type == 'tag' &&
      (startsWith(github.ref_name, 'release/alpha-v') ||
       startsWith(github.ref_name, 'release/beta-v')  ||
       startsWith(github.ref_name, 'release/mark-v')) &&
      github.triggering_actor == github.repository_owner
    needs: [approve_release]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Export tag env (same logic)
        shell: bash
        run: |
          echo "RAW_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          CH="${GITHUB_REF_NAME#release/}"; CH="${CH%%-*}"
          echo "CHANNEL=${CH}" >> "$GITHUB_ENV"
          echo "VERSION=${GITHUB_REF_NAME#release/${CH}-}" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image repo
        run: echo "IMAGE_REPO_LC=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"

      - name: Build & Push multi-arch image (Makefile)
        env:
          DOCKER_REGISTRY: ghcr.io
          DOCKER_REPOSITORY: ${{ env.IMAGE_REPO_LC }}
          IMAGE_TAGS: ${{ env.VERSION }},${{ env.RAW_TAG }}
          PLATFORMS: linux/amd64,linux/arm64
        run: make docker-buildx