
name: CI + Release

on:
  push:
    branches: ['**']
    tags:
      - 'release/mark-v*'
  pull_request:

# Minimal read by default; jobs override as needed
permissions:
  contents: read

env:
  RAW_TAG: ${{ github.ref_type == 'tag' && github.ref_name || '' }}   # e.g., release/mark-v1.2-3
  VERSION: ${{ github.ref_type == 'tag' && replace(github.ref_name, 'release/mark-', '') || '' }}

jobs:
  ci:
    name: Lint/Security/Test/Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go 1.22.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      - name: Deps (tidy, download, verify)
        run: make deps

      - name: Lint
        run: make lint

      - name: Security
        run: make security

      - name: Unit tests
        run: make test

      - name: Build (sanity)
        run: make build

      - name: Coverage summary
        if: always()
        run: |
          if [ -f dist/coverage.out ]; then
            go tool cover -func=dist/coverage.out | tail -n 1
          else
            echo "No coverage file found."
          fi

      - name: Upload coverage HTML (if generated)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: dist/coverage.html
          if-no-files-found: ignore

  approve_release:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'release/mark-v') && github.actor == github.repository_owner
    needs: [ci]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: read
    steps:
      - run: echo "Release gated by environment approval."

  build_binaries:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'release/mark-v') && github.actor == github.repository_owner
    needs: [approve_release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go 1.22.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      - name: Build multi-arch binaries (Makefile)
        run: make build-multi

      - name: Create GitHub Release (idempotent)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RAW_TAG }}
          name: Cosmolet ${{ env.VERSION }}
          generate_release_notes: true

      - name: Upload binaries to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RAW_TAG }}
          files: |
            dist/cosmolet-*

  docker_multiarch:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'release/mark-v') && github.actor == github.repository_owner
    needs: [approve_release]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image repo
        run: echo "IMAGE_REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build & Push multi-arch image (Makefile)
        env:
          DOCKER_REGISTRY: ghcr.io
          DOCKER_REPOSITORY: ${{ env.IMAGE_REPO_LC }}
          IMAGE_TAGS: ${{ env.VERSION }},${{ env.RAW_TAG }}
          PLATFORMS: linux/amd64,linux/arm64
        run: make docker-buildx
